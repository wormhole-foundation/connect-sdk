/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common';

export type EvmDeliveryInstructionStruct = {
  sourceChain: BigNumberish;
  targetAddress: BytesLike;
  payload: BytesLike;
  gasLimit: BigNumberish;
  totalReceiverValue: BigNumberish;
  targetChainRefundPerGasUnused: BigNumberish;
  senderAddress: BytesLike;
  deliveryHash: BytesLike;
  signedVaas: BytesLike[];
};

export type EvmDeliveryInstructionStructOutput = [
  sourceChain: bigint,
  targetAddress: string,
  payload: string,
  gasLimit: bigint,
  totalReceiverValue: bigint,
  targetChainRefundPerGasUnused: bigint,
  senderAddress: string,
  deliveryHash: string,
  signedVaas: string[],
] & {
  sourceChain: bigint;
  targetAddress: string;
  payload: string;
  gasLimit: bigint;
  totalReceiverValue: bigint;
  targetChainRefundPerGasUnused: bigint;
  senderAddress: string;
  deliveryHash: string;
  signedVaas: string[];
};

export type VaaKeyStruct = {
  chainId: BigNumberish;
  emitterAddress: BytesLike;
  sequence: BigNumberish;
};

export type VaaKeyStructOutput = [
  chainId: bigint,
  emitterAddress: string,
  sequence: bigint,
] & { chainId: bigint; emitterAddress: string; sequence: bigint };

export interface WormholeRelayerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'checkAndExecuteUpgradeMigration'
      | 'deliver'
      | 'deliveryAttempted'
      | 'deliveryFailureBlock'
      | 'deliverySuccessBlock'
      | 'executeInstruction'
      | 'forward'
      | 'forwardPayloadToEvm'
      | 'forwardToEvm'
      | 'forwardVaasToEvm'
      | 'getDefaultDeliveryProvider'
      | 'getDefaultDeliveryProviderOnChain'
      | 'getOriginalOrDefaultDeliveryProvider'
      | 'getRegisteredWormholeRelayerContract'
      | 'initialize'
      | 'quoteDeliveryPrice'
      | 'quoteEVMDeliveryPrice(uint16,uint256,uint256,address)'
      | 'quoteEVMDeliveryPrice(uint16,uint256,uint256)'
      | 'quoteNativeForChain'
      | 'registerWormholeRelayerContract'
      | 'resend'
      | 'resendToEvm'
      | 'send'
      | 'sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)'
      | 'sendPayloadToEvm(uint16,address,bytes,uint256,uint256)'
      | 'sendToEvm'
      | 'sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])'
      | 'sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)'
      | 'setDefaultDeliveryProvider'
      | 'submitContractUpgrade',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'AdminChanged'
      | 'BeaconUpgraded'
      | 'ContractUpgraded'
      | 'Delivery'
      | 'SendEvent'
      | 'Upgraded',
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'checkAndExecuteUpgradeMigration',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'deliver',
    values: [BytesLike[], BytesLike, AddressLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'deliveryAttempted',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'deliveryFailureBlock',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'deliverySuccessBlock',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'executeInstruction',
    values: [EvmDeliveryInstructionStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'forward',
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      AddressLike,
      VaaKeyStruct[],
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'forwardPayloadToEvm',
    values: [BigNumberish, AddressLike, BytesLike, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'forwardToEvm',
    values: [
      BigNumberish,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      VaaKeyStruct[],
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'forwardVaasToEvm',
    values: [
      BigNumberish,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      VaaKeyStruct[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getDefaultDeliveryProvider',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getDefaultDeliveryProviderOnChain',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getOriginalOrDefaultDeliveryProvider',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRegisteredWormholeRelayerContract',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteDeliveryPrice',
    values: [BigNumberish, BigNumberish, BytesLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteEVMDeliveryPrice(uint16,uint256,uint256,address)',
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteEVMDeliveryPrice(uint16,uint256,uint256)',
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteNativeForChain',
    values: [BigNumberish, BigNumberish, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'registerWormholeRelayerContract',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'resend',
    values: [VaaKeyStruct, BigNumberish, BigNumberish, BytesLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'resendToEvm',
    values: [
      VaaKeyStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'send',
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      AddressLike,
      VaaKeyStruct[],
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)',
    values: [
      BigNumberish,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'sendPayloadToEvm(uint16,address,bytes,uint256,uint256)',
    values: [BigNumberish, AddressLike, BytesLike, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'sendToEvm',
    values: [
      BigNumberish,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      VaaKeyStruct[],
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])',
    values: [
      BigNumberish,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      VaaKeyStruct[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)',
    values: [
      BigNumberish,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      VaaKeyStruct[],
      BigNumberish,
      AddressLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDefaultDeliveryProvider',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'submitContractUpgrade',
    values: [BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'checkAndExecuteUpgradeMigration',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'deliver', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'deliveryAttempted',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deliveryFailureBlock',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deliverySuccessBlock',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'executeInstruction',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'forward', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'forwardPayloadToEvm',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'forwardToEvm',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'forwardVaasToEvm',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getDefaultDeliveryProvider',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getDefaultDeliveryProviderOnChain',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOriginalOrDefaultDeliveryProvider',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRegisteredWormholeRelayerContract',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'quoteDeliveryPrice',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'quoteEVMDeliveryPrice(uint16,uint256,uint256,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'quoteEVMDeliveryPrice(uint16,uint256,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'quoteNativeForChain',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerWormholeRelayerContract',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'resend', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'resendToEvm',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'send', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'sendPayloadToEvm(uint16,address,bytes,uint256,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'sendToEvm', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDefaultDeliveryProvider',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'submitContractUpgrade',
    data: BytesLike,
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractUpgradedEvent {
  export type InputTuple = [oldContract: AddressLike, newContract: AddressLike];
  export type OutputTuple = [oldContract: string, newContract: string];
  export interface OutputObject {
    oldContract: string;
    newContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeliveryEvent {
  export type InputTuple = [
    recipientContract: AddressLike,
    sourceChain: BigNumberish,
    sequence: BigNumberish,
    deliveryVaaHash: BytesLike,
    status: BigNumberish,
    gasUsed: BigNumberish,
    refundStatus: BigNumberish,
    additionalStatusInfo: BytesLike,
    overridesInfo: BytesLike,
  ];
  export type OutputTuple = [
    recipientContract: string,
    sourceChain: bigint,
    sequence: bigint,
    deliveryVaaHash: string,
    status: bigint,
    gasUsed: bigint,
    refundStatus: bigint,
    additionalStatusInfo: string,
    overridesInfo: string,
  ];
  export interface OutputObject {
    recipientContract: string;
    sourceChain: bigint;
    sequence: bigint;
    deliveryVaaHash: string;
    status: bigint;
    gasUsed: bigint;
    refundStatus: bigint;
    additionalStatusInfo: string;
    overridesInfo: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendEventEvent {
  export type InputTuple = [
    sequence: BigNumberish,
    deliveryQuote: BigNumberish,
    paymentForExtraReceiverValue: BigNumberish,
  ];
  export type OutputTuple = [
    sequence: bigint,
    deliveryQuote: bigint,
    paymentForExtraReceiverValue: bigint,
  ];
  export interface OutputObject {
    sequence: bigint;
    deliveryQuote: bigint;
    paymentForExtraReceiverValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WormholeRelayer extends BaseContract {
  connect(runner?: ContractRunner | null): WormholeRelayer;
  waitForDeployment(): Promise<this>;

  interface: WormholeRelayerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  checkAndExecuteUpgradeMigration: TypedContractMethod<
    [],
    [void],
    'nonpayable'
  >;

  deliver: TypedContractMethod<
    [
      encodedVMs: BytesLike[],
      encodedDeliveryVAA: BytesLike,
      relayerRefundAddress: AddressLike,
      deliveryOverrides: BytesLike,
    ],
    [void],
    'payable'
  >;

  deliveryAttempted: TypedContractMethod<
    [deliveryHash: BytesLike],
    [boolean],
    'view'
  >;

  deliveryFailureBlock: TypedContractMethod<
    [deliveryHash: BytesLike],
    [bigint],
    'view'
  >;

  deliverySuccessBlock: TypedContractMethod<
    [deliveryHash: BytesLike],
    [bigint],
    'view'
  >;

  executeInstruction: TypedContractMethod<
    [evmInstruction: EvmDeliveryInstructionStruct],
    [
      [bigint, bigint, string] & {
        status: bigint;
        gasUsed: bigint;
        targetRevertDataTruncated: string;
      },
    ],
    'nonpayable'
  >;

  forward: TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: BytesLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      refundChain: BigNumberish,
      refundAddress: BytesLike,
      deliveryProviderAddress: AddressLike,
      vaaKeys: VaaKeyStruct[],
      consistencyLevel: BigNumberish,
    ],
    [void],
    'payable'
  >;

  forwardPayloadToEvm: TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
    ],
    [void],
    'payable'
  >;

  forwardToEvm: TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: AddressLike,
      deliveryProviderAddress: AddressLike,
      vaaKeys: VaaKeyStruct[],
      consistencyLevel: BigNumberish,
    ],
    [void],
    'payable'
  >;

  forwardVaasToEvm: TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      vaaKeys: VaaKeyStruct[],
    ],
    [void],
    'payable'
  >;

  getDefaultDeliveryProvider: TypedContractMethod<[], [string], 'view'>;

  getDefaultDeliveryProviderOnChain: TypedContractMethod<
    [targetChain: BigNumberish],
    [string],
    'view'
  >;

  getOriginalOrDefaultDeliveryProvider: TypedContractMethod<
    [targetChain: BigNumberish],
    [
      [string, string] & {
        deliveryProvider: string;
        deliveryProviderOnTarget: string;
      },
    ],
    'view'
  >;

  getRegisteredWormholeRelayerContract: TypedContractMethod<
    [chainId: BigNumberish],
    [string],
    'view'
  >;

  initialize: TypedContractMethod<
    [defaultDeliveryProvider: AddressLike],
    [void],
    'nonpayable'
  >;

  quoteDeliveryPrice: TypedContractMethod<
    [
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      deliveryProviderAddress: AddressLike,
    ],
    [
      [bigint, string] & {
        nativePriceQuote: bigint;
        encodedExecutionInfo: string;
      },
    ],
    'view'
  >;

  'quoteEVMDeliveryPrice(uint16,uint256,uint256,address)': TypedContractMethod<
    [
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      deliveryProviderAddress: AddressLike,
    ],
    [
      [bigint, bigint] & {
        nativePriceQuote: bigint;
        targetChainRefundPerGasUnused: bigint;
      },
    ],
    'view'
  >;

  'quoteEVMDeliveryPrice(uint16,uint256,uint256)': TypedContractMethod<
    [
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
    ],
    [
      [bigint, bigint] & {
        nativePriceQuote: bigint;
        targetChainRefundPerGasUnused: bigint;
      },
    ],
    'view'
  >;

  quoteNativeForChain: TypedContractMethod<
    [
      targetChain: BigNumberish,
      currentChainAmount: BigNumberish,
      deliveryProviderAddress: AddressLike,
    ],
    [bigint],
    'view'
  >;

  registerWormholeRelayerContract: TypedContractMethod<
    [encodedVm: BytesLike],
    [void],
    'nonpayable'
  >;

  resend: TypedContractMethod<
    [
      deliveryVaaKey: VaaKeyStruct,
      targetChain: BigNumberish,
      newReceiverValue: BigNumberish,
      newEncodedExecutionParameters: BytesLike,
      newDeliveryProviderAddress: AddressLike,
    ],
    [bigint],
    'payable'
  >;

  resendToEvm: TypedContractMethod<
    [
      deliveryVaaKey: VaaKeyStruct,
      targetChain: BigNumberish,
      newReceiverValue: BigNumberish,
      newGasLimit: BigNumberish,
      newDeliveryProviderAddress: AddressLike,
    ],
    [bigint],
    'payable'
  >;

  send: TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: BytesLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      refundChain: BigNumberish,
      refundAddress: BytesLike,
      deliveryProviderAddress: AddressLike,
      vaaKeys: VaaKeyStruct[],
      consistencyLevel: BigNumberish,
    ],
    [bigint],
    'payable'
  >;

  'sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)': TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: AddressLike,
    ],
    [bigint],
    'payable'
  >;

  'sendPayloadToEvm(uint16,address,bytes,uint256,uint256)': TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
    ],
    [bigint],
    'payable'
  >;

  sendToEvm: TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: AddressLike,
      deliveryProviderAddress: AddressLike,
      vaaKeys: VaaKeyStruct[],
      consistencyLevel: BigNumberish,
    ],
    [bigint],
    'payable'
  >;

  'sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])': TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      vaaKeys: VaaKeyStruct[],
    ],
    [bigint],
    'payable'
  >;

  'sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)': TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      vaaKeys: VaaKeyStruct[],
      refundChain: BigNumberish,
      refundAddress: AddressLike,
    ],
    [bigint],
    'payable'
  >;

  setDefaultDeliveryProvider: TypedContractMethod<
    [encodedVm: BytesLike],
    [void],
    'nonpayable'
  >;

  submitContractUpgrade: TypedContractMethod<
    [encodedVm: BytesLike],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'checkAndExecuteUpgradeMigration',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'deliver',
  ): TypedContractMethod<
    [
      encodedVMs: BytesLike[],
      encodedDeliveryVAA: BytesLike,
      relayerRefundAddress: AddressLike,
      deliveryOverrides: BytesLike,
    ],
    [void],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'deliveryAttempted',
  ): TypedContractMethod<[deliveryHash: BytesLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'deliveryFailureBlock',
  ): TypedContractMethod<[deliveryHash: BytesLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'deliverySuccessBlock',
  ): TypedContractMethod<[deliveryHash: BytesLike], [bigint], 'view'>;
  getFunction(nameOrSignature: 'executeInstruction'): TypedContractMethod<
    [evmInstruction: EvmDeliveryInstructionStruct],
    [
      [bigint, bigint, string] & {
        status: bigint;
        gasUsed: bigint;
        targetRevertDataTruncated: string;
      },
    ],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'forward',
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: BytesLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      refundChain: BigNumberish,
      refundAddress: BytesLike,
      deliveryProviderAddress: AddressLike,
      vaaKeys: VaaKeyStruct[],
      consistencyLevel: BigNumberish,
    ],
    [void],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'forwardPayloadToEvm',
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
    ],
    [void],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'forwardToEvm',
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: AddressLike,
      deliveryProviderAddress: AddressLike,
      vaaKeys: VaaKeyStruct[],
      consistencyLevel: BigNumberish,
    ],
    [void],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'forwardVaasToEvm',
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      vaaKeys: VaaKeyStruct[],
    ],
    [void],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'getDefaultDeliveryProvider',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'getDefaultDeliveryProviderOnChain',
  ): TypedContractMethod<[targetChain: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'getOriginalOrDefaultDeliveryProvider',
  ): TypedContractMethod<
    [targetChain: BigNumberish],
    [
      [string, string] & {
        deliveryProvider: string;
        deliveryProviderOnTarget: string;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getRegisteredWormholeRelayerContract',
  ): TypedContractMethod<[chainId: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'initialize',
  ): TypedContractMethod<
    [defaultDeliveryProvider: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(nameOrSignature: 'quoteDeliveryPrice'): TypedContractMethod<
    [
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      deliveryProviderAddress: AddressLike,
    ],
    [
      [bigint, string] & {
        nativePriceQuote: bigint;
        encodedExecutionInfo: string;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'quoteEVMDeliveryPrice(uint16,uint256,uint256,address)',
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      deliveryProviderAddress: AddressLike,
    ],
    [
      [bigint, bigint] & {
        nativePriceQuote: bigint;
        targetChainRefundPerGasUnused: bigint;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'quoteEVMDeliveryPrice(uint16,uint256,uint256)',
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
    ],
    [
      [bigint, bigint] & {
        nativePriceQuote: bigint;
        targetChainRefundPerGasUnused: bigint;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'quoteNativeForChain',
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      currentChainAmount: BigNumberish,
      deliveryProviderAddress: AddressLike,
    ],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'registerWormholeRelayerContract',
  ): TypedContractMethod<[encodedVm: BytesLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'resend',
  ): TypedContractMethod<
    [
      deliveryVaaKey: VaaKeyStruct,
      targetChain: BigNumberish,
      newReceiverValue: BigNumberish,
      newEncodedExecutionParameters: BytesLike,
      newDeliveryProviderAddress: AddressLike,
    ],
    [bigint],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'resendToEvm',
  ): TypedContractMethod<
    [
      deliveryVaaKey: VaaKeyStruct,
      targetChain: BigNumberish,
      newReceiverValue: BigNumberish,
      newGasLimit: BigNumberish,
      newDeliveryProviderAddress: AddressLike,
    ],
    [bigint],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'send',
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: BytesLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      refundChain: BigNumberish,
      refundAddress: BytesLike,
      deliveryProviderAddress: AddressLike,
      vaaKeys: VaaKeyStruct[],
      consistencyLevel: BigNumberish,
    ],
    [bigint],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)',
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: AddressLike,
    ],
    [bigint],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'sendPayloadToEvm(uint16,address,bytes,uint256,uint256)',
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
    ],
    [bigint],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'sendToEvm',
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: AddressLike,
      deliveryProviderAddress: AddressLike,
      vaaKeys: VaaKeyStruct[],
      consistencyLevel: BigNumberish,
    ],
    [bigint],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])',
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      vaaKeys: VaaKeyStruct[],
    ],
    [bigint],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)',
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      targetAddress: AddressLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      vaaKeys: VaaKeyStruct[],
      refundChain: BigNumberish,
      refundAddress: AddressLike,
    ],
    [bigint],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'setDefaultDeliveryProvider',
  ): TypedContractMethod<[encodedVm: BytesLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'submitContractUpgrade',
  ): TypedContractMethod<[encodedVm: BytesLike], [void], 'nonpayable'>;

  getEvent(
    key: 'AdminChanged',
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: 'BeaconUpgraded',
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: 'ContractUpgraded',
  ): TypedContractEvent<
    ContractUpgradedEvent.InputTuple,
    ContractUpgradedEvent.OutputTuple,
    ContractUpgradedEvent.OutputObject
  >;
  getEvent(
    key: 'Delivery',
  ): TypedContractEvent<
    DeliveryEvent.InputTuple,
    DeliveryEvent.OutputTuple,
    DeliveryEvent.OutputObject
  >;
  getEvent(
    key: 'SendEvent',
  ): TypedContractEvent<
    SendEventEvent.InputTuple,
    SendEventEvent.OutputTuple,
    SendEventEvent.OutputObject
  >;
  getEvent(
    key: 'Upgraded',
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    'AdminChanged(address,address)': TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    'BeaconUpgraded(address)': TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    'ContractUpgraded(address,address)': TypedContractEvent<
      ContractUpgradedEvent.InputTuple,
      ContractUpgradedEvent.OutputTuple,
      ContractUpgradedEvent.OutputObject
    >;
    ContractUpgraded: TypedContractEvent<
      ContractUpgradedEvent.InputTuple,
      ContractUpgradedEvent.OutputTuple,
      ContractUpgradedEvent.OutputObject
    >;

    'Delivery(address,uint16,uint64,bytes32,uint8,uint256,uint8,bytes,bytes)': TypedContractEvent<
      DeliveryEvent.InputTuple,
      DeliveryEvent.OutputTuple,
      DeliveryEvent.OutputObject
    >;
    Delivery: TypedContractEvent<
      DeliveryEvent.InputTuple,
      DeliveryEvent.OutputTuple,
      DeliveryEvent.OutputObject
    >;

    'SendEvent(uint64,uint256,uint256)': TypedContractEvent<
      SendEventEvent.InputTuple,
      SendEventEvent.OutputTuple,
      SendEventEvent.OutputObject
    >;
    SendEvent: TypedContractEvent<
      SendEventEvent.InputTuple,
      SendEventEvent.OutputTuple,
      SendEventEvent.OutputObject
    >;

    'Upgraded(address)': TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
