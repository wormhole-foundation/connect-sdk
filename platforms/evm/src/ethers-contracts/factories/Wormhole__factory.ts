/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from 'ethers';
import type {
  Signer,
  BytesLike,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from 'ethers';
import type { NonPayableOverrides } from '../common';
import type { Wormhole, WormholeInterface } from '../Wormhole';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'setup',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: 'initData',
        type: 'bytes',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'previousAdmin',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'newAdmin',
        type: 'address',
      },
    ],
    name: 'AdminChanged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'beacon',
        type: 'address',
      },
    ],
    name: 'BeaconUpgraded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'implementation',
        type: 'address',
      },
    ],
    name: 'Upgraded',
    type: 'event',
  },
  {
    stateMutability: 'payable',
    type: 'fallback',
  },
  {
    stateMutability: 'payable',
    type: 'receive',
  },
] as const;

const _bytecode =
  '0x6080604052346100a65761043f80380380610019816100c1565b92833981016040828203126100a6578151916001600160a01b03831683036100a6576020810151906001600160401b0382116100a657019181601f840112156100a65782519261007061006b856100eb565b6100c1565b92848452602085830101116100a657610098936100939160208086019101610106565b610129565b60405160d1908161036e8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b038111838210176100e657604052565b6100ab565b6001600160401b0381116100e657601f01601f191660200190565b60005b8381106101195750506000910152565b8181015183820152602001610109565b803b156101c2577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0383169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a28151158015906101ba575b6101a5575050565b6101b7916101b161021d565b91610276565b50565b50600061019d565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b60405190606082016001600160401b038111838210176100e65760405260278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b9190823b156102bf576000816102b49460208394519201905af43d156102b7573d906102a461006b836100eb565b9182523d6000602084013e610313565b90565b606090610313565b60405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b9091901561031f575090565b81511561032f5750805190602001fd5b6044604051809262461bcd60e51b82526020600483015261035f8151809281602486015260208686019101610106565b601f01601f19168101030190fdfe608060405236156054577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e156050573d90f35b3d90fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e156050573d90f3fea2646970667358221220caea035c6901d5676c93da122f0fe2bc00d31e13fe33b2aac70d4592602b8c3c64736f6c63430008130033';

type WormholeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WormholeConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Wormhole__factory extends ContractFactory {
  constructor(...args: WormholeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    setup: AddressLike,
    initData: BytesLike,
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(setup, initData, overrides || {});
  }
  override deploy(
    setup: AddressLike,
    initData: BytesLike,
    overrides?: NonPayableOverrides & { from?: string },
  ) {
    return super.deploy(setup, initData, overrides || {}) as Promise<
      Wormhole & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Wormhole__factory {
    return super.connect(runner) as Wormhole__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WormholeInterface {
    return new Interface(_abi) as WormholeInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Wormhole {
    return new Contract(address, _abi, runner) as unknown as Wormhole;
  }
}
